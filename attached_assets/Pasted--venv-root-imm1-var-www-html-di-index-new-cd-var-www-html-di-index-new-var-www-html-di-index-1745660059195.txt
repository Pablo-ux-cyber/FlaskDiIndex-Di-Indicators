(venv) root@imm1:/var/www/html/di_index_new# cd /var/www/html/di_index_new && /var/www/html/di_index_new/venv/bin/python3 daily_update.py
2025-04-26 12:33:14,934 - daily_update - INFO - Запуск ежедневного обновления данных DI индекса
2025-04-26 12:33:14,934 - daily_update - INFO - Загружены 15 монет из конфигурационного файла
2025-04-26 12:33:14,934 - daily_update - INFO - Загружен список из 15 монет для отслеживания
2025-04-26 12:33:14,934 - daily_update - INFO - Запуск обновления данных для 15 монет
2025-04-26 12:33:16,002 - daily_update - INFO - Обработка пакета 1/3: BTC, ETH, XRP, LTC, ADA
2025-04-26 12:33:16,688 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 209 (char 208)
2025-04-26 12:33:16,724 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 213 (char 212)
2025-04-26 12:33:16,877 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 202 (char 201)
2025-04-26 12:33:16,963 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 210 (char 209)
2025-04-26 12:33:17,435 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 216 (char 215)
2025-04-26 12:33:18,288 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:18,668 - server - INFO - История DI индекса сохранена: historical_data/BTC_di_combined_history.json, записей: 2001
2025-04-26 12:33:18,759 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:19,066 - server - INFO - История DI индекса сохранена: historical_data/XRP_di_combined_history.json, записей: 2001
2025-04-26 12:33:19,178 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:19,512 - server - INFO - История DI индекса сохранена: historical_data/ADA_di_combined_history.json, записей: 2001
2025-04-26 12:33:19,727 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:20,031 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:20,081 - server - INFO - История DI индекса сохранена: historical_data/ETH_di_combined_history.json, записей: 2001
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:20,409 - server - INFO - История DI индекса сохранена: historical_data/LTC_di_combined_history.json, записей: 2001
2025-04-26 12:33:20,410 - daily_update - INFO - Успешно обновлены данные для BTC
2025-04-26 12:33:20,410 - daily_update - INFO - Успешно обновлены данные для XRP
2025-04-26 12:33:20,410 - daily_update - INFO - Успешно обновлены данные для ADA
2025-04-26 12:33:20,410 - daily_update - INFO - Успешно обновлены данные для ETH
2025-04-26 12:33:20,410 - daily_update - INFO - Успешно обновлены данные для LTC
2025-04-26 12:33:22,412 - daily_update - INFO - Обработка пакета 2/3: DOT, SOL, DOGE, LINK, AVAX
2025-04-26 12:33:23,254 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 203 (char 202)
2025-04-26 12:33:23,653 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 213 (char 212)
2025-04-26 12:33:23,965 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:24,278 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 209 (char 208)
2025-04-26 12:33:24,307 - server - INFO - История DI индекса сохранена: historical_data/LINK_di_combined_history.json, записей: 2001
2025-04-26 12:33:24,574 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 203 (char 202)
2025-04-26 12:33:24,776 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
2025-04-26 12:33:24,794 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 204 (char 203)
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:25,075 - server - INFO - История DI индекса сохранена: historical_data/DOGE_di_combined_history.json, записей: 2001
2025-04-26 12:33:25,089 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:25,391 - server - INFO - История DI индекса сохранена: historical_data/SOL_di_combined_history.json, записей: 2001
2025-04-26 12:33:27,075 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
2025-04-26 12:33:27,205 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:27,696 - server - INFO - История DI индекса сохранена: historical_data/AVAX_di_combined_history.json, записей: 2001
2025-04-26 12:33:27,814 - server - INFO - История DI индекса сохранена: historical_data/DOT_di_combined_history.json, записей: 2001
2025-04-26 12:33:27,818 - daily_update - INFO - Успешно обновлены данные для LINK
2025-04-26 12:33:27,818 - daily_update - INFO - Успешно обновлены данные для DOGE
2025-04-26 12:33:27,818 - daily_update - INFO - Успешно обновлены данные для SOL
2025-04-26 12:33:27,818 - daily_update - INFO - Успешно обновлены данные для AVAX
2025-04-26 12:33:27,818 - daily_update - INFO - Успешно обновлены данные для DOT
2025-04-26 12:33:29,820 - daily_update - INFO - Обработка пакета 3/3: BNB, MATIC, UNI, SHIB, ATOM
2025-04-26 12:33:30,525 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 202 (char 201)
2025-04-26 12:33:30,732 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 210 (char 209)
2025-04-26 12:33:31,160 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 226 (char 225)
2025-04-26 12:33:31,193 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 207 (char 206)
2025-04-26 12:33:31,710 - server - ERROR - Ошибка при загрузке исторических данных: Expecting value: line 1 column 201 (char 200)
2025-04-26 12:33:32,351 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:32,654 - server - INFO - История DI индекса сохранена: historical_data/BNB_di_combined_history.json, записей: 2001
2025-04-26 12:33:32,654 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:32,786 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:33,268 - server - INFO - История DI индекса сохранена: historical_data/ATOM_di_combined_history.json, записей: 2000
2025-04-26 12:33:33,362 - server - INFO - История DI индекса сохранена: historical_data/UNI_di_combined_history.json, записей: 2001
2025-04-26 12:33:33,664 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:33,998 - server - INFO - История DI индекса сохранена: historical_data/MATIC_di_combined_history.json, записей: 2000
2025-04-26 12:33:36,102 - server - ERROR - Ошибка при сохранении исторических данных: Object of type date is not JSON serializable
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
/var/www/html/di_index_new/server.py:83: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["range"].replace(0, 1e-10, inplace=True)  # Avoid division by zero
/var/www/html/di_index_new/server.py:172: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df["mfi_lower_sum"].replace(0, np.nan, inplace=True)
2025-04-26 12:33:36,398 - server - INFO - История DI индекса сохранена: historical_data/SHIB_di_combined_history.json, записей: 2001
2025-04-26 12:33:36,403 - daily_update - INFO - Успешно обновлены данные для BNB
2025-04-26 12:33:36,403 - daily_update - INFO - Успешно обновлены данные для ATOM
2025-04-26 12:33:36,403 - daily_update - INFO - Успешно обновлены данные для UNI
2025-04-26 12:33:36,403 - daily_update - INFO - Успешно обновлены данные для MATIC
2025-04-26 12:33:36,403 - daily_update - INFO - Успешно обновлены данные для SHIB
2025-04-26 12:33:38,411 - daily_update - INFO - Обновление данных завершено за 23.48 секунд
(venv) root@imm1:/var/www/html/di_index_new# 
